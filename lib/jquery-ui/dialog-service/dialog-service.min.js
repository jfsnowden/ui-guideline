angular.module("dialogService",[]).service("dialogService",function($rootScope,$q,$compile,$templateCache,$timeout){var _this=this;this.dialogs={};this.open=function(id,template,model,options){if(!angular.isDefined(id)){throw"dialogService requires id in call to open"}var dialogExist=_this.dialogs[id];if("undefined"!==typeof dialogExist&&angular.isDefined(dialogExist)){this.close(id,dialogExist.scope.model)}if(!angular.isDefined(template)){throw"dialogService requires template in call to open"}if(!angular.isDefined(model)){model=null}var dialogOptions={};if(angular.isDefined(options)){angular.extend(dialogOptions,options)}var dialog={scope:null,ref:null,deferred:null};var dialogTemplate=$templateCache.get(template);if(!angular.isDefined(dialogTemplate)){throw"dialogService could not find template "+template}dialogTemplate=dialogTemplate.trim();dialog.scope=$rootScope.$new();dialog.scope.model=model;var dialogLinker=$compile(dialogTemplate);dialog.ref=$(dialogLinker(dialog.scope));var customCloseFn=dialogOptions.close;var cleanupFn=this.cleanup;dialog.ref.resetId=function(newId,oldId){if(id==oldId){id=newId}};dialogOptions.close=function(event,ui){if(customCloseFn){customCloseFn(event,ui)}cleanupFn(id)};dialog.ref.dialog(dialogOptions);if(dialogOptions.draggable&&$.isPlainObject(dialogOptions.draggable)){dialog.ref.dialog({draggable:false}).parent().draggable(dialogOptions.draggable)}else{dialog.ref.dialog({draggable:false}).parent().draggable()}$timeout(function(){dialog.ref.dialog("open");_this.dialogs[id]=dialog;dialog.deferred=$q.defer();return dialog.deferred.promise},1)};this.resetDialogId=function(newId,oldId){var dialog=this.getExistingDialog(oldId);if(dialog){dialog.ref.resetId(newId,oldId);delete _this.dialogs[oldId];_this.dialogs[newId]=dialog}};this.close=function(id,result){var dialog=_this.getExistingDialog(id);if(dialog!=null){dialog.deferred.resolve(result);dialog.ref.dialog("close")}};this.cancel=function(id){var dialog=_this.getExistingDialog(id);dialog.deferred.reject();dialog.ref.dialog("close")};this.cleanup=function(id){var dialog=_this.getExistingDialog(id);dialog.deferred.reject();dialog.scope.$destroy();dialog.ref.remove();delete _this.dialogs[id]};this.getExistingDialog=function(id){var dialog=_this.dialogs[id];if(!angular.isDefined(dialog)){return null}return dialog}});